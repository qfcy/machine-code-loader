import sys
def extract_funcs():
    # 备用函数，解析粘贴的cppreference文档中的标识符
    lines=sys.stdin.readlines()
    l=[]
    for line in lines:
        line=line.strip()
        if not line:continue
        if line[0].isascii():
            for i in range(1,len(lines)+1):
                if not line[:i].isidentifier():
                    size=i-1;break
            else:
                size=len(lines)
            if size>0:l.append(line[:size])
    print("funcs.extend(%s)"%repr(l))

funcs=[] # 在std的函数
direct_funcs=[] # 不在std，使用::访问的函数
# 参考 cppreference.com
funcs.extend(['malloc', 'calloc', 'realloc', 'free'])
funcs.extend(['scanf', 'fscanf', 'sscanf', 'vscanf', 'vfscanf', 'vsscanf', 'printf', 'fprintf', 'sprintf', 'snprintf', 'vprintf', 'vfprintf', 'vsprintf', 'vsnprintf','perror'])
direct_funcs.extend(['_errno'])
funcs.extend(['fgetc', 'getc', 'fgets', 'fputc', 'putc', 'fputs', 'getchar', 'putchar', 'puts', 'ungetc'])
direct_funcs.extend(['abs', 'labs', 'llabs', 'div', 'ldiv', 'lldiv', 'fabs', 'fabsf', 'fabsl', 'fmod', 'fmodf', 'fmodl', 'remainder', 'remainderf', 'remainderl', 'remquo', 'remquof', 'remquol', 'fma', 'fmaf', 'fmal', 'fmax', 'fmaxf', 'fmaxl', 'fmin', 'fminf', 'fminl', 'fdim', 'fdimf', 'fdiml', 'exp', 'expf', 'expl', 'exp2', 'exp2f', 'exp2l', 'expm1', 'expm1f', 'expm1l', 'log', 'logf', 'logl', 'log10', 'log10f', 'log10l', 'log2', 'log2f', 'log2l', 'log1p', 'log1pf', 'log1pl', 'pow', 'powf', 'powl', 'sqrt', 'sqrtf', 'sqrtl', 'cbrt', 'cbrtf', 'cbrtl', 'hypot', 'hypotf', 'hypotl', 'sin', 'sinf', 'sinl', 'cos', 'cosf', 'cosl', 'tan', 'tanf', 'tanl', 'asin', 'asinf', 'asinl', 'acos', 'acosf', 'acosl', 'atan', 'atanf', 'atanl', 'atan2', 'atan2f', 'atan2l', 'sinh', 'sinhf', 'sinhl', 'cosh', 'coshf', 'coshl', 'tanh', 'tanhf', 'tanhl', 'asinh', 'asinhf', 'asinhl', 'acosh', 'acoshf', 'acoshl', 'atanh', 'atanhf', 'atanhl', 'erf', 'erff', 'erfl', 'erfc', 'erfcf', 'erfcl', 'tgamma', 'tgammaf', 'tgammal', 'lgamma', 'lgammaf', 'lgammal', 'ceil', 'ceilf', 'ceill', 'floor', 'floorf', 'floorl', 'trunc', 'truncf', 'truncl', 'round', 'roundf', 'roundl', 'lround', 'lroundf', 'lroundl', 'llround', 'llroundf', 'llroundl', 'nearbyint', 'nearbyintf', 'nearbyintl', 'rint', 'rintf', 'rintl', 'lrint', 'lrintf', 'lrintl', 'llrint', 'llrintf', 'llrintl', 'frexp', 'frexpf', 'frexpl', 'ldexp', 'ldexpf', 'ldexpl', 'modf', 'modff', 'modfl', 'scalbn', 'scalbnf', 'scalbnl', 'scalbln', 'scalblnf', 'scalblnl', 'ilogb', 'ilogbf', 'ilogbl', 'logb', 'logbf', 'logbl', 'nextafter', 'nextafterf', 'nextafterl', 'nexttoward', 'nexttowardf', 'nexttowardl', 'copysign', 'copysignf', 'copysignl'])
funcs.extend(['atof', 'atoi', 'atol', 'atoll', 'strtol', 'strtoll', 'strtoul', 'strtoull', 'strtof', 'strtod', 'strtold', 'strcpy', 'strncpy', 'strcat', 'strncat', 'strxfrm', 'strlen', 'strcmp', 'strncmp', 'strcoll', 'strspn', 'strcspn', 'strtok', 'memcmp', 'memset', 'memcpy', 'memmove', 'strerror'])
direct_funcs.extend(['strdup', 'strchr', 'strrchr', 'strpbrk', 'strstr', 'memchr', 'memccpy'])
funcs.extend(['isalnum', 'isalpha', 'islower', 'isupper', 'isdigit', 'isxdigit', 'iscntrl', 'isgraph', 'isspace', 'isblank', 'isprint', 'ispunct', 'tolower', 'toupper'])
funcs.extend(['fopen', 'freopen', 'fclose', 'fflush', 'setbuf', 'setvbuf', 'fread', 'fwrite'])
funcs.extend(['difftime', 'time', 'clock', 'asctime',  'ctime', 'strftime', 'gmtime', 'localtime', 'mktime'])
funcs.extend(['system','exit','raise','signal','longjmp'])
direct_funcs.extend(['access', 'chdir', 'getcwd', 'mkdir', 'rmdir', 'rename', 'unlink', 'close', 'dup', 'dup2', 'read', 'write', 'execve', 'getpid', 'sleep', 'usleep', 'getenv', 'isatty', 'getopt', 'ftruncate', 'lseek']) # windows可用的部分unistd.h函数

TAB=" "*4
with open("runtime_env.h","w",encoding="utf-8") as f:
    print(f"""\
// Generated by {__file__}, do NOT edit
#pragma once
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <cctype>
#include <csignal>
#include <csetjmp>
#include <unistd.h>
#include "constants.h"

struct RuntimeEnv {{
    RuntimeVersion version;
    int platform;
    void* (*getFunc)(const char *);
    int (*import)(const char *);
    void* (*getLibraryFunc)(const char *,const char *);
    void (*freeLibrary)(const char *);
    void (*debugModuleInfo)();
    FILE* (*getstdin)();
    FILE* (*getstdout)();
    FILE* (*getstderr)();
    void (*stackTrace)();
    void (*abort)();\
""",file=f)
    for func in funcs:
        print(TAB+f"decltype(std::{func}) *{func};",file=f)
    for func in direct_funcs:
        print(TAB+f"decltype(::{func}) *{func};",file=f)
    print("""\
    RuntimeEnv(){\n"""+TAB*2,end="",file=f)
    print(("\n"+TAB*2).join(f"{func}=std::{func};" for func in funcs),file=f)
    print(TAB*2,end="",file=f)
    print(("\n"+TAB*2).join(f"{func}=::{func};" for func in direct_funcs),file=f)
    print(TAB+"}",file=f)
    print("""\
};

#include <string>
#include <unordered_map>
#include <utility>

static std::unordered_map<std::string,std::pair<void *,size_t>> imported_funcs;""",file=f)